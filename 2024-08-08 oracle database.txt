* SQ.(Sructured Qqery Language)
    구조화된 질의 언어, DB에서 사용되는 명령문을들 SQL 이라고 함
    줄여서 "쿼리문" 이라고도 부른다.
    
    
    [ 종류 ]
    DQL - Data Query Language (데이터 조회 용도)
          SELECT (데이터 조회)
    DML - Data Manipulation Language (데이터 조작 용도)
          INSERT (데이터 추가), UPDATE (데이터 수정), DELETE (데이터 삭제)
           * SELECT 문도 굳이 DQL 로 분류하지 않고 DML로 간주한다.
    DDL - Data Definition Language (데이터 정의 용도)
          CREATE (데이터베이스 구조물 생성), 
          ALTER (데이터베이스 구조물 수정), 
          DROP (데이터베이스 구조물 삭제)
    DCL - Data Control Language (데이터 제어 용도)
          그 이외의 모든 명령문들을 모아서 DCL 이라고 함
          GRANT (권한 부여), REVOKE (권한 뺏기)
    TCL - Transaction Control Language (트랜잭션 제어용도)
          COMMIT (데이터 조작 결과 픽스), ROLLBACK (데이터 조작 결과 복구)
          SAVEPOINT (데이터 조작 흐름의 중간 저장점 잡기)
          * TCL 또한 DCL 의 하위 분류임!!

 < SELECT >
    DQL 또는 DML 의 종류로써,
    데이터를 조회하거나 검색할 때 사용되는 명령어
    
    - RESULT SET : SELECT 문을 통해 조회된 데이터들의 결과물을 의미
    
    [ 표현법 ]
    SELECT 조회하고자하는컬럼명, 컬럼명, 컬럼명, ....
    FROM 테이블명; >> 반드시 있는 값만 조회

-- > SQL 명령문은들은 대소문자를 가리지 않음!!
소문자로 써도 무방, 단, 가독성을 위해 대문자를 선호!!
참고) 자바는 대소문자를 구분했었음!!  empId, empName : 낙타 표기법(CAMEL CASE)
 오라클은 대소문자를 구분하지 않음!!  EMP_ID, EMP_NAME : 스네이크 표기법 (SNAKE CASE)
SELECT  EMP_ID,
        EMP_NAME,
        EMP_NO,
        EMAIL,
        PHONE,
        DEPT_CODE,
        JOB_CODE,
        SAL_LEVEL,
        BONUS,
        MANAGER_ID,
        HIRE_DATE,
        ENT_DATE,
        ENT_YN
    FROM EMPLOYEE;

SELECT * 
    FROM EMPLOYEE;

--> 해당 테이블의 "모든" 컬럼을 조회하고 싶다면
위의 구문 처럼 일일이 나열해도 상관없지만,
SELECT * 을 통해 구문을 축약할 수도 있다.

< 컬럼값을 통한 산술연산 >
    
조회하고자 하는 컬럼값을 나열하는 SELECT 절에 산술연산자 (+-/*) 기술해서 결과를 조회할 수도 있다.

--> 산술 연산 과정에서 NULL 값이 존재할 경우
-- 산술 연산 결과 마저도 NULL로 나오게 됨!!

EMPLOYEE 테이블로부터 직원명, 입사일, 근무일수 조회 (= 오늘날짜 - 입사일)
DATE 타입 (날짜 타입) 끼리도 산술연산 가능 (년, 월, 일, 시, 분, 초)
오늘 날짜 : SYSDATE

--> 결과값은 일 수 단위로 출력됨!!
--  값이 지저분하게 실수로 나오는 이유는 DATE 타입 안에
--  포함되어있는 시/분/초 에 대한 연산까지 함께 수행하기 때문!!


   < 컬럼명에 별칭 지정하기 >
    
 컬럼명에 별칭 (ALIAS, 별명) 을 붙여줄 수 있다.
    
    [ 표현법 ]
    SELECT 컬럼명 AS 별칭,
    컬럼명 AS "별칭",
    컬럼명 별칭,
    컬럼명 "별칭"
    
 단, AS를 붙이든 안붙이던 간에  별칭에 특수문자나 띄어쓰기가 포함된 경우 반드시  "" (쌍따옴표)로 묶어서 표기해야함


<리터럴 >
 "값" 을 의미함
 SELECT 절에 일반 리터럴을 제시하여
 실제 그 테이블에 존재하는 데이터처럼 조회가 가능하다.


 < DISTINCT >
    
    조회하고자 하는 컬럼에 중복된 값을
    딱 한번씩만 조회하고 싶을 때 사용 (중복 제거)
    
    [ 표현법 ]
    SELECT DISTINCT 컬럼명
    -- 단, SELECT DISTINCT 컬럼명, DISTINCT 컬럼명 은 안댐
    
    > 단, 해당 컬럼명 앞에 기술하되,
    SELECT 절에서는 DISTINCT 구문을 단 한번만 사용 가능함!!


< WHERE 절 >
    
 SELECT 문 내부에서 조회하고자 하는 테이블에
 "특정 조건" 을 제시해서 그 조건에 만족되는 행들만을
 조회하고자 할 때 기술하는 구문  
 >>NULL이 아닌 월급이나 봉급 같은걸로 구분해서 조회 하고자 할때 쓰임
    
  [ 표현법 ]
  SELECT 조회하고자하는컬럼명 , 컬럼명, ....
  FROM 테이블
  WHERE 조건식;
    
  > SELECT 문의 필수 구성 절 : SELECT, FROM 절
  > WHERE 절이 없다고 해서 SELECT 문에 오류가 발생하진 않음!!
    
  * SELECT 문의 각 절의 실행순서
  FROM 절 --> WHERE 절 --> SELECT 절

 -WHERE 절의 조건식에는 다양한 연산자들 사용 가능!!
    
  < 비교 연산자 >
  >, <, >=, <= 대소비교 연산자 
  = (일치하는가? : 자바에서의 동등비교는 ==)
  !=, ^=, <> (일치하지 않는가?) 세개 다 같은 의미
 --> 비교 연산 시 NULL은 제외하고 연산됨!! 주의 해야함!!
> SELECT 절에서 부여한 별칭을 WHERE 절에서 사용할 수 없다.
-- 왜? WHERE 절이 SELECT 절보다 먼저 실행되기 때문에!!

 < 논리 연산자 >
        
  여러개의 조건식을 하나로 엮을 때 사용
        
    - AND (~ 이면서, 그리고, ~이고) : 자바에서는 &&
    - OR  (~이거나, 또는)          : 자바에서는 ||
> AND 연산자가 OR 연산자보다 우선순위가 더 높다!! (다른 언어들도 마찬가지)
< BETWEEN AND >
    
    몇 이상 몇 이하인 범위에 대한 조건을 제시할 때 사용
    
    [ 표현법 ]
    비교대상컬럼명 BETWEEN 하한값 AND 상한값

 날짜 간에도 대소비교 연산이 가능하고, 그에 따라
-- 이상, 이하 조건이라면 BETWEEN AND 연산자 또한 사용가능!



 < LIKE '특정 패턴' >
    
    비교하려는 컬럼값이 내가 지정한 '특정 패턴' 에
    만족될 경우 조회
    
    [ 표현법 ]
    비교대상컬럼명 LIKE '특정 패턴'
    
    - '특정 패턴' 에는 와일드 카드인 '%', '_' 를 가지고 제시
    '%' : 0글자 이상
          비교대상컬럼명 LIKE '문자%'
          : 컬럼값 중에 '문자'로 시작되는 것들을 모두 조회
          비교대상컬럼명 LIKE '%문자'
          : 컬럼값 중에 '문자' 로 끝나는 것들을 모두 조회          
          비교대상컬럼명 LIKE '%문자%'
          : 컬럼값 중에 '문자' 가 포함되는 것들을 모두 조회
          (특히 '%문자%' 패턴은 검색 기능 구현시 쓰임!!)

< IS NULL >
    
    NULL 과 일치하는지를 비교하는 연산자
    
    [ 표현법 ]
    비교대상컬럼명 IS NULL : 컬럼값이 NULL 인 경우 조회
    비교대상컬럼명 IS NOY NULL : 컬럼값이 NULL 이 아닌 경우 조회

< IN >
    비교 대상 컬럼 값에 내가 제시한 "목록들" 중에서
    일치하는 값이 이는지 "동등비교" 해주는 연산자
    
    [ 표현법 ]
    비교대상컬럼명 IN(값,값,값...)


< 연결 연산자 || >
    
    여러 컬럼값들을 마치 하나의 컬럼인것 처럼 연결시켜주는 연산자
    컬럼과 리터럴 또한 연결 가능하다.!!
    
    자바로 따지면
    System.out.println("num : " + num);


< 연산자 우선순위 >

    0. ()
    1. 산술연산자
    2. 연결연산자
    3. 비교연산자
    4. IS NULL, LIKE, IN
    5. BETWEEN AD
    6. NOT
    7. AND (논리연산자)
    8. OR (논리연산자)



 < ORDER BY 절 >
    
    SELECT 문 가장 마지막에 기입하는 구문일 뿐만 아니라
    실행 순서 또한 가장 마지막인 구문
    조회된 결과를 "최종적으로" 오름차순 또는 내림차순으로
    "정렬" 해주는 역할
    
    [ 표현법 ]
    SELECT 조회할컬럼명, 컬럼명, ...
    FROM 테이블명
    WHERE 조건식 (생략 가능)
    ORDER BY [정렬기준컬럼명/별칭/컬럼순번] [ASC/DESC] [NULLS FIRST/NULLS LAST];
    - ASC : 오름차순 정렬 (생략 시 기본값)
    - DESC : 내림차순 정렬